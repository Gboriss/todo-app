{"version":3,"sources":["src/edit.js","src/close.js","src/bindTaskEvents.js","src/checked.js","src/unfinish.js","src/app.js","modules/save.js"],"names":["editTask","editButton","listItem","parentNode","label","querySelector","input","containsClass","classList","contains","innerText","value","className","img","Image","src","require","innerHTML","toggle","deleteTask","removeChild","bindTaskEvents","checkboxEvent","checkbox","deleteButton","onclick","finishedTasks","document","getElementById","finishTask","appendChild","unfinishTask","unfinishedTasks","addButton","inputTask","createNewElement","task","load","createElement","type","del","save","unfinishedTasksArr","finishedTasksArr","i","children","length","push","getElementsByTagName","localStorage","removeItem","setItem","JSON","stringify"],"mappings":"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","file":"save.4e7b17c5.js","sourceRoot":"..","sourcesContent":["\r\nimport save from '../modules/save'\r\n\r\nexport default function editTask() {\r\n    let editButton = this\r\n    let listItem = this.parentNode\r\n    let label = listItem.querySelector('label')\r\n    let input = listItem.querySelector('input[type=text]')\r\n\r\n    let containsClass = listItem.classList.contains('editMode')\r\n\r\n    if (containsClass) {\r\n        label.innerText = input.value\r\n        editButton.className = 'edit icon'\r\n        // editButton.innerHTML = '<span class=\"material-icons\">edit</span>'\r\n        let img = new Image()\r\n        img.src = require('../images/p.png')\r\n        editButton.innerHTML = '<img src=\"'+img.src+'\"/>'\r\n        save()\r\n    } else {\r\n        input.value = label.innerText\r\n        editButton.className = 'save icon'\r\n        // editButton.innerText = '<span class=\"material-icons\">save</span>'\r\n        let img = new Image()\r\n        img.src = require('../images/save.png')\r\n        editButton.innerHTML = '<img src=\"'+img.src+'\"/>'\r\n    }\r\n    listItem.classList.toggle('editMode')\r\n}\r\n \r\n","\r\nimport save from '../modules/save'\r\n\r\nexport default \r\nfunction deleteTask() {\r\n    let listItem = this.parentNode\r\n    let ul = listItem.parentNode\r\n    ul.removeChild(listItem)\r\n\r\n    save()\r\n}\r\n\r\n","\r\nimport editTask from './edit'\r\nimport deleteTask from './close'\r\n\r\nexport default function bindTaskEvents(listItem, checkboxEvent) {\r\n    let checkbox = listItem.querySelector('button.checkbox')\r\n    let editButton = listItem.querySelector('button.edit')\r\n    let deleteButton = listItem.querySelector('button.delete')\r\n\r\n    checkbox.onclick = checkboxEvent\r\n    editButton.onclick = editTask\r\n    deleteButton.onclick = deleteTask\r\n}","\r\nimport unfinishTask from './unfinish'\r\nimport bindTaskEvents from './bindTaskEvents'\r\nimport save from '../modules/save'\r\n\r\nlet finishedTasks = document.getElementById('finished-tasks')\r\n\r\nexport default function finishTask() {\r\n    let listItem = this.parentNode\r\n    let checkbox = listItem.querySelector('button.checkbox')\r\n    checkbox.className='checkbox icon'\r\n    checkbox.innerHTML ='<span class=\"material-icons\">check_box</span>'\r\n    \r\n    finishedTasks.appendChild(listItem)\r\n    bindTaskEvents(listItem, unfinishTask)\r\n    save()\r\n}\r\n","\r\nimport finishTask from './checked'\r\nimport bindTaskEvents from './bindTaskEvents'\r\nimport save from '../modules/save'\r\n\r\n\r\nlet unfinishedTasks = document.getElementById('incomplete-tasks')\r\n\r\nexport default function unfinishTask() {\r\n    let listItem = this.parentNode\r\n    let checkbox = listItem.querySelector('button.checkbox')\r\n\r\n    checkbox.className ='checkbox icon'\r\n    checkbox.innerHTML ='<span class=\"material-icons\">check_box_outline_blank</span>'\r\n\r\n    unfinishedTasks.appendChild(listItem)\r\n    bindTaskEvents(listItem, finishTask)\r\n\r\n    save()\r\n}\r\n","\r\nlet addButton = document.getElementById('add')\r\nlet inputTask = document.getElementById('new-task')\r\nlet unfinishedTasks = document.getElementById('incomplete-tasks')\r\nlet finishedTasks = document.getElementById('finished-tasks')\r\n\r\nexport default function createNewElement(task, load) {\r\n    let listItem = document.createElement('li')\r\n    let checkbox = document.createElement('button')\r\n\r\n    if (load){\r\n        checkbox.className='checkbox icon'\r\n        checkbox.innerHTML = '<span class=\"material-icons\">check_box</span>'\r\n    } else {\r\n        checkbox.className='checkbox icon'\r\n        checkbox.innerHTML = '<span class=\"material-icons\">check_box_outline_blank</span>'\r\n    }\r\n\r\n    let label = document.createElement('label')\r\n    label.innerHTML = task\r\n    \r\n    let input = document.createElement('input')\r\n    input.type =\"text\"\r\n    \r\n    let editButton = document.createElement('button')\r\n    editButton.className='edit icon'\r\n    let img = new Image()\r\n    img.src = require('../images/p.png')\r\n    editButton.appendChild(img)\r\n\r\n    let deleteButton = document.createElement('button')\r\n    deleteButton.className='delete icon'\r\n    // deleteButton.innerHTML ='<span class=\"material-icons\">delete</span>'\r\n    let del = new Image()\r\n    del.src = require('../images/basket.png')\r\n    deleteButton.appendChild(del)\r\n\r\n    // let img = new Image()\r\n    // img.src = require('../images/p.png')\r\n    // deleteButton.innerHTML = '<img src=\"'+img.src+'\"/>'\r\n\r\n    listItem.appendChild(checkbox)\r\n    listItem.appendChild(label)\r\n    listItem.appendChild(input)\r\n    listItem.appendChild(editButton)\r\n    listItem.appendChild(deleteButton)\r\n\r\n    return listItem\r\n}\r\n","let unfinishedTasks = document.getElementById('incomplete-tasks')\r\nlet finishedTasks = document.getElementById('finished-tasks')\r\nimport bindTaskEvents from '../src/bindTaskEvents'\r\nimport unfinishTask from '../src/unfinish'\r\nimport finishTask from '../src/checked' \r\nimport createNewElement from '../src/app'\r\n\r\nexport default function save() {\r\n    let unfinishedTasksArr = []\r\n    let finishedTasksArr = []\r\n\r\n    for (let i = 0; i < unfinishedTasks.children.length; i++) {\r\n        unfinishedTasksArr.push(unfinishedTasks.children[i].getElementsByTagName('label')[0].innerText)\r\n    }\r\n\r\n    for (let i = 0; i < finishedTasks.children.length; i++) {\r\n        finishedTasksArr.push(finishedTasks.children[i].getElementsByTagName('label')[0].innerText)\r\n    }\r\n\r\n    localStorage.removeItem('todo');\r\n    localStorage.setItem('todo', JSON.stringify({\r\n        unfinishedTasks: unfinishedTasksArr,\r\n        finishedTasks: finishedTasksArr\r\n    }))\r\n}\r\n\r\n// function load() {\r\n//     return JSON.parse(localStorage.getItem('todo'))\r\n// }\r\n\r\n\r\n// let data = load();\r\n\r\n// for(let i = 0; i < data.unfinishedTasks.length; i++) {\r\n//     let listItem = createNewElement(data.unfinishedTasks[i], false)\r\n//     unfinishedTasks.appendChild(listItem)\r\n//     bindTaskEvents(listItem, finishTask)\r\n// }\r\n\r\n// for(let i = 0; i < data.finishedTasks.length; i++) {\r\n//     let listItem = createNewElement(data.finishedTasks[i], true)\r\n//     finishedTasks.appendChild(listItem)\r\n//     bindTaskEvents(listItem, unfinishTask)\r\n// }\r\n\r\n"]}